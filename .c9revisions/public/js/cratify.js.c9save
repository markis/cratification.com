{"ts":1378525099775,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function Cratify(data, container, ampersand, autoRun, animationsObj) {\n    this.data = data;\n    this.$container = container ? container : $(\"<div />\").css({\"overflow\": \"hidden\", width: $(window).width(), height: $(window).height() }).appendTo(\"body\");\n    this.$ampersand = ampersand ? ampersand : $(\"<span />\").html(\"&\").css({position:\"relative\"}).appendTo(this.$container);\n    //winHeight = $container.height();\n    this.$ampersand.css(\"position\", \"absolute\");\n    this.$ampersand.position({\n        my: \"center\",\n        at: \"center\",\n        of: this.$container\n    });\n    \n    this.Animations = animationsObj || Animations;\n    \n    if (autoRun !== false)\n    {\n        this.queueAnimations();\n        this.runAnimations();\n    }\n}\n\nCratify.prototype.queueAnimations = function() {\n    var left = 0;\n    var right = 0;\n    for (var i=0; i<this.data.length; i++)\n    {\n        $('body')\n        // left side\n        .delay(1000, 'leftChain')\n        .queue('leftChain', queueLeftIn)\n        .delay(1000, 'leftChain')\n        .queue('leftChain', queueLeftOut)\n        // right side\n        .delay(1000, 'rightChain')\n        .queue('rightChain', queueRightIn)\n        .delay(1000, 'rightChain')\n        .queue('rightChain', queueRightOut);\n    }\n\n    var data = this.data;\n    var Animations = new this.Animations(this.$container, this.$ampersand);\n\n    // These functions are defined as such, so that we don't define\n    // anonymous functions in a for loop\n    function queueLeftIn(next){\n        var animation = data[left].left;\n        animation.inOut = 'in';\n        animation.leftRight = 'left';\n        Animations.runAnimation(animation, next);\n    }\n    function queueLeftOut(next){\n        var animation = data[left].left;\n        animation.inOut = 'out';\n        animation.leftRight = 'left';\n        Animations.runAnimation(animation, next);\n        left++;\n    }\n    function queueRightIn(next){\n        var rightInAnimation = data[right].right;\n        rightInAnimation.inOut = 'in';\n        rightInAnimation.leftRight = 'right';\n        Animations.runAnimation(rightInAnimation, next);\n    }\n    function queueRightOut(next) {\n        var rightOutAnimation = data[right].right;\n        rightOutAnimation.inOut = 'out';\n        rightOutAnimation.leftRight = 'right';\n        Animations.runAnimation(rightOutAnimation, next);\n        right++;\n    }\n}\n\nCratify.prototype.runAnimations = function() {\n    $('body').queue('leftChain');\n    $('body').dequeue('leftChain');\n\n    $('body').queue('rightChain');\n    $('body').dequeue('rightChain');\n}\n\n\n/********************************************************************\n\n    Define Animations\n\n********************************************************************/\nfunction Animations($container, $ampersand) {\n    this.$container = $container;\n    this.$ampersand = $ampersand;\n}\n\nAnimations.prototype = {\n    runAnimation : function(animation, next) {\n        var animateIn = this['in'];\n        var animateOut = this.out;\n        var $container = this.$container;\n        var $ampersand = this.$ampersand;\n        \n        if (animation.inOut == 'out') {\n            var fxOut = animateOut[animation.animationOut];\n            if (fxOut) {\n                fxOut(animation, $container, $ampersand, next);\n            } else {\n                animateOut.flyOutDown(animation, $container, $ampersand, next);\n            }\n        } else {\n            var fxIn = animateIn[animation.animationIn];\n            if (fxIn) {\n                fxIn(animation, $container, $ampersand, next);\n            } else {\n                animateOut.flyInDown(animation, $container, $ampersand, next);\n            }\n        }\n    },\n    'in' : {\n\n        flyInUp : function(animation, $container, $ampersand, next) {\n            var endPos;\n            animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container)\n            .position({\n                my: \"top\",\n                at: \"bottom\",\n                of: $container\n            })\n            // end position\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos }\n            })\n            .css({left:endPos.left})\n            .animate({top: endPos.top}, {duration:1000, queue:false, complete: next});\n        },\n\n        flyInDown : function(animation, $container, $ampersand, next) {\n            var endPos;\n            animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container)\n            // start position\n            .position({\n                my: \"bottom\",\n                at: \"top\",\n                of: $container\n            })\n            // end position\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos; }\n            })\n            .css({left:endPos.left})\n            .animate({top: endPos.top}, {duration:1000, queue:false, complete: next});\n        },\n\n        flyInLeft : function(animation, $container, $ampersand, next) {\n            var endPos;\n            var element = animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container);\n            // start position\n            element.position({\n                my: \"right center\",\n                at: \"left center\",\n                of: $container\n            })\n            // end position\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos; }\n            })\n            //.css({visibility:\"visible\"}) //, left: element.width() * 2 * -1, top: pos.top})\n            .animate({left: endPos.left}, {duration:1000, queue:false, complete: next});\n        },\n\n        flyInRight : function(animation, $container, $ampersand, next) {\n            var endPos;\n            var element = animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container);\n            element\n            // start position\n            .position({\n                my: \"left center\",\n                at: \"right center\",\n                of: $container,\n                using: function (startPos) {\n                    // I am not sure why the positioning math always put the element on the right side during\n                    // testing, but I compensated for it with this little winWidth and element.width() addition\n                    //startPos.left = startPos.left + $container.width() + element.width();\n                    element.css(startPos); }\n            })\n            // end position\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos; }\n            })\n            //.css({visibility:\"visible\"}) //, left: (element.width() * 2) + winWidth, top: pos.top})\n            .animate({left: endPos.left}, {duration:1000, queue:false, complete: next});\n        },\n\n        fadeIn : function(animation, $container, $ampersand, next) {\n            animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container)\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand\n            }).hide().fadeIn(1000, next);\n        }\n\n    },\n    out : {\n\n        flyOutUp : function(animation, $container, $ampersand, next) {\n            function flyOutUpCompleteAnimate () {\n                var targetElement = animation.element[0];\n                delete animation.element;\n                $container[0].removeChild(targetElement);\n                next(); \n            }\n            function flyOutUpAnimate (pos) {\n                animation.element.animate({top: pos.top}, {duration:1000, queue:false, complete: flyOutUpCompleteAnimate});\n            }\n            animation.element.position({\n                my: \"bottom\",\n                at: \"top\",\n                of: $container,\n                using: flyOutUpAnimate\n            });\n        },\n\n        flyOutDown : function(animation, $container, $ampersand, next) {\n            function flyOutDownCompleteAnimate () {\n                var targetElement = animation.element[0];\n                delete animation.element;\n                $container[0].removeChild(targetElement);\n                next(); \n            }\n            function flyOutDownAnimate (pos) {\n                animation.element.animate({top: pos.top}, {duration:1000, queue:false, complete: flyOutDownCompleteAnimate});\n            }\n            animation.element.position({\n                my: \"top\",\n                at: \"bottom\",\n                of: $container,\n                using: flyOutDownAnimate\n            });\n        },\n\n        flyOutLeft : function(animation, $container, $ampersand, next) {\n            function completeAnimate () {\n                var targetElement = animation.element[0];\n                delete animation.element;\n                $container[0].removeChild(targetElement);\n                next(); \n            }\n            function animate (pos) {\n                animation.element.animate({left: pos.left}, {duration:1000, queue:false, complete: completeAnimate});\n            }\n            animation.element.position({\n                my: \"left\",\n                at: \"right\",\n                of: $container,\n                using: animate\n            });\n        },\n\n        flyOutRight : function(animation, $container, $ampersand, next) {\n            function completeAnimate () {\n                var targetElement = animation.element[0];\n                delete animation.element;\n                $container[0].removeChild(targetElement);\n                next(); \n            }\n            function animate (pos) {\n                animation.element.animate({left: pos.left}, {duration:1000, queue:false, complete: completeAnimate});\n            }\n            animation.element.position({\n                my: \"right\",\n                at: \"left\",\n                of: $container,\n                using: animate\n            });\n        },\n\n        fadeOut : function(animation, $container, $ampersand, next) {\n            var element = animation.element;\n            element.fadeOut(1000, function () {\n                delete animation.element;\n                $container[0].removeChild(element[0]);\n                next();\n            });\n        },\n        \n        stop : function (animation, $container, $ampersand, next) {\n            \n        }\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":11189}]],"length":11189}
