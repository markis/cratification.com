{"ts":1343599517171,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var winWidth;\nvar $container, $ampersand;\n\nfunction cratify(animations, container, ampersand) {\n\n    $container = container ? container : $(\"<div />\").css({\"overflow\": \"hidden\", width: $(window).width(), height: $(window).height() }).appendTo(\"body\");\n    $ampersand = ampersand ? ampersand : $(\"<span />\").html(\"&\").css({position:\"relative\"}).appendTo($container);\n    //winHeight = $container.height();\n    winWidth = $container.width();\n    $container.css({\"overflow\": \"hidden\", fontFamily:\"helvetica\", fontWeight: \"bold\", fontSize: 120});\n    $ampersand.css(\"position\", \"absolute\");\n    $ampersand.position({\n        my: \"center\",\n        at: \"center\",\n        of: $container\n    });\n    \n    var left = 0;\n    var right = 0;\n    for (var i=0; i<animations.length; i++)\n    {\n        $('body')\n        // left side\n        .delay(1000, 'leftChain')\n        .queue('leftChain', queueLeftIn)\n        .delay(1000, 'leftChain')\n        .queue('leftChain', queueLeftOut)\n        // right side\n        .delay(1000, 'rightChain')\n        .queue('rightChain', queueRightIn)\n        .delay(1000, 'rightChain')\n        .queue('rightChain', queueRightOut);\n    }\n    \n    // These functions are defined as such, so that we don't define\n    // anonymous functions in a for loop\n    function queueLeftIn(next){\n        var animation = animations[left].left;\n        animation.inOut = 'in';\n        animation.leftRight = 'left';\n        Animations.runAnimation(animation, next);\n    }\n    function queueLeftOut(next){  \n        var animation = animations[left].left;\n        animation.inOut = 'out';\n        animation.leftRight = 'left';\n        Animations.runAnimation(animation, next);\n        left++;\n    }\n    function queueRightIn(next){\n        var animation = animations[right].right;\n        animation.inOut = 'in';\n        animation.leftRight = 'right';\n        Animations.runAnimation(animation, next);\n    }    \n    function queueRightOut(next) { \n        var animation = animations[right].right;\n        animation.inOut = 'out';\n        animation.leftRight = 'right';\n        Animations.runAnimation(animation, next);\n        right++;\n    }\n    \n    $('body').queue('leftChain');\n    $('body').dequeue('leftChain');\n    \n    $('body').queue('rightChain');\n    $('body').dequeue('rightChain');\n    \n    \n\n}\n\n\n/********************************************************************\n\n    Define Animations\n\n********************************************************************/\nvar Animations = {\n    runAnimation : function(animation, next) {\n        var animateIn = Animations['in'];\n        var animateOut = Animations.out;\n        if (animation.inOut == 'out') {\n            var fx = animateOut[animation.animationOut];\n            if (fx) {\n                fx(animation, next);\n            } else {\n                animateOut.flyOutDown(animation, next);\n            }\n        } else {\n            var fx = animateIn[animation.animationIn];\n            if (fx) {\n                fx(animation, next);\n            } else {\n                animateOut.flyInDown(animation, next);\n            }\n        }\n    },\n    'in' : {\n\n        flyInUp : function(animation, next) {\n            var endPos;\n            var element = animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container);\n            element.position({\n                my: \"top\",\n                at: \"bottom\",\n                of: $container,\n                using: function (pos) { element.css({top: pos.top}); }\n            })\n            // end position\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos; element.css({left: pos.left}); }\n            })\n            //.css({visibility:\"visible\"})\n            .animate({top: endPos.top}, {duration:1000, queue:false, complete: next});\n        },\n        \n        flyInDown : function(animation, next) {\n            var endPos;\n            var element = animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container)\n            // start position\n            .position({\n                my: \"bottom\",\n                at: \"top\",\n                of: $container,\n                using: function (pos) { element.css({top: pos.top}); }\n            })\n            // end position\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos; element.css({left: pos.left}); }\n            })\n            //.css({visibility:\"visible\"}) //, left: pos.left, top: element.height() * 2 * -1})\n            .animate({top: endPos.top}, {duration:1000, queue:false, complete: next});\n        },\n        \n        flyInLeft : function(animation, next) {\n            var endPos;\n            var element = animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container);          \n            element\n            // start position\n            .position({\n                my: \"right center\",\n                at: \"left center\",\n                of: $container\n            })\n            // end position\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos; }\n            })\n            //.css({visibility:\"visible\"}) //, left: element.width() * 2 * -1, top: pos.top})\n            .animate({left: endPos.left}, {duration:1000, queue:false, complete: next});\n        },\n        \n        flyInRight : function(animation, next) {\n            var endPos;\n            var element = animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container);            \n            element\n            // start position\n            .position({\n                my: \"left center\",\n                at: \"right center\",\n                of: $container,\n                using: function (startPos) { \n                    // I am not sure why the positioning math always put the element on the right side during\n                    // testing, but I compensated for it with this little winWidth and element.width() addition\n                    startPos.left = startPos.left + winWidth + element.width();\n                    element.css(startPos); }\n            })\n            // end position\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos; }\n            })\n            //.css({visibility:\"visible\"}) //, left: (element.width() * 2) + winWidth, top: pos.top})\n            .animate({left: endPos.left}, {duration:1000, queue:false, complete: next});\n        },\n        \n        flyInSlot : function(animation, next) {\n            var endPos, bottomPos, topPos;\n            var element = animation.element = $(\"<span />\").html(animation.text).css({visibility:\"hidden\",position:\"relative\"}).appendTo($container);\n            element\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand,\n                using: function (pos) { endPos = pos; }\n            })\n            // bottom of the container position\n            .position({\n                my: \"bottom\",\n                at: \"top\",\n                of: $container,\n                using: function (pos) { bottomPos = pos; }\n            })\n            // top of the container position\n            .position({\n                my: \"top\",\n                at: \"bottom\",\n                of: $container,\n                using: function (pos) { topPos = pos; }\n            })\n            .css({visibility:\"visible\", left: endPos.left, top: topPos.top })\n                .animate({left: endPos.left},\n                   {duration:200, queue:false, complete: function() {\n                       element.css({top: topPos.top })\n                       .animate({top: bottomPos.top},\n                            {duration:200, queue:false, complete: function() {\n                                element.css({top: topPos.top })\n                                .animate({top: bottomPos.top},\n                                    {duration:200, queue:false, complete: function() {\n                                        element.css({top: topPos.top })\n                                        .animate({top: endPos.top},\n                                            {duration:200, queue:false, complete: function() {\n                                                next();\n                                        }});\n                                }});\n                       }});\n                }});\n        },\n                       \n        fadeIn : function(animation, next) {\n            animation.element = $(\"<span />\").html(animation.text).css({position:\"relative\"}).appendTo($container)\n            .position({\n                my: animation.leftRight==='right'?\"left center\":\"right center\",\n                at: animation.leftRight==='right'?\"right center\":\"left center\",\n                of: $ampersand\n            }).hide().fadeIn(1000, next);\n        }\n\n    },\n    out : {\n\n        flyOutUp : function(animation, next) {\n            var element = animation.element;\n            element.position({\n                my: \"top\",\n                at: \"bottom\",\n                of: $container,\n                using: function (pos) {\n                    console.log(pos);\n                    element.animate({top: pos.top}, {duration:1000, queue:false, complete: function () {\n                        \n                        delete animation.element;\n                        $container[0].removeChild(element[0]);\n                        next();\n                    }});\n                }\n            });\n        },\n\n        flyOutDown : function(animation, next) {    \n            var element = animation.element;\n            element.position({\n                my: \"bottom\",\n                at: \"top\",\n                of: $container,\n                using: function (pos) {\n                    console.log(pos);\n                    element.animate({top: pos.top}, {duration:1000, queue:false, complete: function () {\n                        \n                        delete animation.element;\n                        $container[0].removeChild(element[0]);\n                        next();\n                    }});\n                }\n            });\n        },\n\n        flyOutLeft : function(animation, next) {   \n            var endPos;\n            var element = animation.element;\n            element.position({\n                my: \"left\",\n                at: \"right\",\n                of: $container,\n                using: function (pos) { endPos = pos; }\n            }).animate({left: endPos.left}, {duration:1000, queue:false, complete: function () {\n                delete animation.element;\n                $container[0].removeChild(element[0]);\n                next();\n            } });\n        },\n        \n        flyOutRight : function(animation, next) {  \n            var endPos;\n            var element = animation.element;\n            element.position({\n                my: \"right\",\n                at: \"left\",\n                of: $container,\n                using: function (pos) { endPos = pos; }\n            }).animate({left: endPos.left}, {duration:1000, queue:false, complete: function () {\n                delete animation.element;\n                $container[0].removeChild(element[0]);\n                next();\n            } });\n        },\n            \n        fadeOut : function(animation, next) {\n            var element = animation.element;\n            element.fadeOut(1000, function () {\n                delete animation.element;\n                $container[0].removeChild(element[0]);\n                next();\n            });\n        }\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":12445}]],"length":12445}
{"contributors":[],"silentsave":false,"ts":1343599621294,"patch":[[{"diffs":[[0,"');\n"],[-1,"    \n    \n\n"],[0,"}\n\n\n"]],"start1":2291,"start2":2291,"length1":19,"length2":8}]],"length":12434,"saved":false}
{"ts":1343600113709,"patch":[[{"diffs":[[0,"mation, next) {\n"],[1,"            this.description = \"Fly In Up\";\n"],[0,"            var "]],"start1":3141,"start2":3141,"length1":32,"length2":76}]],"length":12478,"saved":false}
{"ts":1343600189288,"patch":[[{"diffs":[[0,") {\n"],[-1,"            this.description = \"Fly In Up\";\n"],[0,"    "]],"start1":3153,"start2":3153,"length1":52,"length2":8}]],"length":12434,"saved":false}
{"ts":1343600503026,"patch":[[{"diffs":[[0,"******/\n"],[1,"function AnimationsObj (container, ampersand) {\n    \n}\n\n"],[0,"var Anim"]],"start1":2455,"start2":2455,"length1":16,"length2":72}]],"length":12490,"saved":false}
{"ts":1343600516798,"patch":[[{"diffs":[[0,"ions"],[-1,"Obj "],[0,"(con"]],"start1":2478,"start2":2478,"length1":12,"length2":8}]],"length":12486,"saved":false}
{"ts":1343600555239,"patch":[[{"diffs":[[0,") {\n    "],[1,"this.container = container;\n    this.ampersand = ampersand;"],[0,"\n}\n\nvar "]],"start1":2503,"start2":2503,"length1":16,"length2":75}]],"length":12545,"saved":false}
{"ts":1343600601879,"patch":[[{"diffs":[[0,"imations"],[1,"Obj"],[0,"(contain"]],"start1":2474,"start2":2474,"length1":16,"length2":19}]],"length":12548,"saved":false}
{"ts":1343600699729,"patch":[[{"diffs":[[0,"and;\n}\n\n"],[-1,"var "],[0,"Animatio"]],"start1":2569,"start2":2569,"length1":20,"length2":16},{"diffs":[[0,"imations"],[1,"Obj.prototype"],[0," = {\n   "]],"start1":2579,"start2":2579,"length1":16,"length2":29}]],"length":12557,"saved":false}
{"ts":1343600709670,"patch":[[{"diffs":[[0,"ateIn = "],[-1,"Animation"],[1,"thi"],[0,"s['in'];"]],"start1":2668,"start2":2668,"length1":25,"length2":19},{"diffs":[[0,"teOut = "],[-1,"Animation"],[1,"thi"],[0,"s.out;\n "]],"start1":2705,"start2":2705,"length1":25,"length2":19}]],"length":12545,"saved":false}
{"contributors":[],"silentsave":false,"ts":1343600777544,"patch":[[{"diffs":[[0,"ionsObj("],[1,"$"],[0,"containe"]],"start1":2478,"start2":2478,"length1":16,"length2":17},{"diffs":[[0,"Obj($container, "],[1,"$"],[0,"ampersand) {\n   "]],"start1":2482,"start2":2482,"length1":32,"length2":33},{"diffs":[[0,"   this."],[1,"$"],[0,"containe"]],"start1":2513,"start2":2513,"length1":16,"length2":17},{"diffs":[[0,"is.$container = "],[1,"$"],[0,"container;\n    t"]],"start1":2518,"start2":2518,"length1":32,"length2":33},{"diffs":[[0,"   this."],[1,"$"],[0,"ampersan"]],"start1":2547,"start2":2547,"length1":16,"length2":17},{"diffs":[[0,"is.$ampersand = "],[1,"$"],[0,"ampersand;\n}\n\nAn"]],"start1":2552,"start2":2552,"length1":32,"length2":33}]],"length":12551,"saved":false}
{"ts":1343600842145,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[1,"    var Animations = new AnimationsObj($container, $ampersand);\n    \n"],[0,"    // These"]],"start1":1149,"start2":1149,"length1":24,"length2":93}]],"length":12620,"saved":false}
{"contributors":[],"silentsave":false,"ts":1343601178457,"patch":[[{"diffs":[[0,"          var fx"],[1,"Out"],[0," = animateOut[an"]],"start1":2840,"start2":2840,"length1":32,"length2":35},{"diffs":[[0,"          if (fx"],[1,"Out"],[0,") {\n            "]],"start1":2900,"start2":2900,"length1":32,"length2":35},{"diffs":[[0,"              fx"],[1,"Out"],[0,"(animation, next"]],"start1":2925,"start2":2925,"length1":32,"length2":35},{"diffs":[[0,"  var fx"],[1,"In"],[0," = anima"]],"start1":3081,"start2":3081,"length1":16,"length2":18},{"diffs":[[0,"  if (fx"],[1,"In"],[0,") {\n    "]],"start1":3138,"start2":3138,"length1":16,"length2":18},{"diffs":[[0,"      fx"],[1,"In"],[0,"(animati"]],"start1":3162,"start2":3162,"length1":16,"length2":18}]],"length":12635,"saved":false}
