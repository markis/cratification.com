{"ts":1342721140839,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function cratify(animations) {\n\n    var IMG_URL = \"http://images.crateandbarrel.com/is/image/Crate/CBBold?fmt=png-alpha&$t=%5Cfs52%5Cexpnd-8+\";\n    var winHeight = $(window).height();\n    var winWidth = $(window).width();\n    \n    $(\"body\").css({\"overflow\": \"hidden\", fontFamily:\"helvetica\", fontWeight: \"bold\", fontSize: 120});\n    var $container = $(\"<div />\").css({\"overflow\": \"hidden\"}).appendTo(\"body\");\n    \n    var $ampersand = $(\"<span />\").html(\"&\").css({position:\"absolute\"}).appendTo($container);\n    \n    \n    $ampersand.position({\n        my: \"center\",\n        at: \"center\",\n        of: $(window),\n        collision: \"fit\",\n        using: positionEverything\n    });\n    \n    function positionEverything(windowPos) {\n        $ampersand.css(windowPos); \n        for (i=0; i<animations.length; i++)\n        {\n            var animation = animations[i];\n            animation.left.element = $(\"<span />\").html(animation.left.text).css({ position:\"absolute\",padding:0,overflow:\"hidden\",visibility:\"hidden\"}).appendTo($container);\n            animation.right.element = $(\"<span />\").html(animation.right.text).css({ position:\"absolute\",padding:0,overflow:\"hidden\",visibility:\"hidden\"}).appendTo($container);\n            animation.left.element.position({\n                my: \"right center\",\n                at: \"left center\",\n                of: $ampersand,\n                collision: \"fit\",\n                using: function(pos) {animation.left.pos= pos;}\n            })\n            animation.right.element.position({\n                my: \"left center\",\n                at: \"right center\",\n                of: $ampersand,\n                collision: \"fit\",\n                using: function(pos) {animation.right.pos= pos;}\n            })\n        }\n    }\n    \n    var left = 0;\n    var right = 0;\n    for (i=0; i<animations.length; i++)\n    {\n           \n        $('body')\n        // left side\n        .delay(1000, 'leftChain')\n        .queue('leftChain', function(next){\n            runAnimation(animations[left].left, 'in', next);\n        })\n        .delay(1000, 'leftChain')\n        .queue('leftChain', function(next){  \n            runAnimation(animations[left].left, 'out', next);\n            left++;\n        })\n        // right side\n        .delay(1000, 'rightChain')\n        .queue('rightChain', function(next){\n            runAnimation(animations[right].right, 'in', next);\n        })\n        .delay(1000, 'rightChain')\n        .queue('rightChain', function(next){  \n            runAnimation(animations[right].right, 'out', next);\n            right++;\n        });\n    }\n    $('body').queue('leftChain');\n    $('body').queue('rightChain');\n    \n    $('body').dequeue('leftChain');\n    $('body').dequeue('rightChain');\n    \n    /********************************************************************\n    \n        Define Animations\n    \n    ********************************************************************/\n    function runAnimation(animation, inOut, next) {\n        if (inOut == 'out') {\n            switch(animation.animationOut)\n            {\n            case \"fadeOut\": fadeOut(animation, next); break;\n            case \"flyOutUp\": flyOutUp(animation, next); break;\n            case \"flyOutLeft\": flyOutLeft(animation, next); break;\n            case \"flyOutRight\": flyOutRight(animation, next); break;\n            default: case \"flyOutDown\": flyOutDown(animation, next); break;               \n            }\n        } else {\n            switch(animation.animationIn)\n            {\n            case \"revealDown\": revealDown(animation, next); break;\n            case \"revealDownHalf\": revealDownHalf(animation, next); break;\n            case \"revealUp\": revealUp(animation, next); break;\n            case \"revealUpHalf\": revealUpHalf(animation, next); break;\n            case \"fadeIn\": fadeIn(animation, next); break;\n            case \"flyInUp\": flyInUp(animation, next); break;\n            case \"flyInLeft\": flyInLeft(animation, next); break;\n            case \"flyInRight\": flyInRight(animation, next); break;\n            case \"flyInSlot\": flyInSlot(animation, next); break;\n            default: case \"flyInDown\": flyInDown(animation, next); break;\n            }\n        }\n    }\n    \n    function flyInUp(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        element.css({visibility:\"visible\", left: pos.left, top: winHeight})\n        .animate({top: pos.top}, {duration:1000, queue:false, complete: next});\n    }\n    \n    function flyInDown(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        element.css({visibility:\"visible\", left: pos.left, top: element.height() * 2 * -1})\n        .animate({top: pos.top}, {duration:1000, queue:false, complete: next});\n    }\n    \n    function flyInLeft(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        element.css({visibility:\"visible\", left: element.width() * 2 * -1, top: pos.top})\n        .animate({left: pos.left}, {duration:1000, queue:false, complete: next});\n    }\n    \n    function flyInRight(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        element\n        .css({visibility:\"visible\", left: element.width() * 2 * -1, top: pos.top})\n        .animate({left: pos.left}, {duration:1000, queue:false, complete: next});\n    }\n    \n    function flyInSlot(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        var beginningTop = element.height() * 2 * -1;\n        element\n            .css({visibility:\"visible\", left: pos.left, top: beginningTop })\n        .animate({left: pos.left}\n           , {\n               duration:200\n               , queue:false\n               , complete: function() {\n               element.css({top: beginningTop })\n                   .animate({top: winHeight}\n               , {\n               duration:200\n               , queue:false\n               , complete: function() {\n                   element.css({top: beginningTop })\n               .animate({top: winHeight}\n               , {\n               duration:200\n               , queue:false\n               , complete: function() {\n                   element.css({top: beginningTop })\n                       .animate({top: pos.top}\n               , {\n               duration:200\n               , queue:false\n               , complete: function() {\n                   next();\n                       \n               }})\n               }})\n               }})\n               }});\n    }\n                   \n    function fadeIn(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        element.hide().css({visibility:\"visible\",left: pos.left, top: pos.top}).fadeIn(1000, next);\n    }\n                   \n    function revealDownHalf(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        var height = element.height();\n        var halfHeight = height / 2;\n        element.css({visibility:\"visible\",left: pos.left, top: pos.top, height:1})\n        .animate({height: halfHeight}, {duration:1000, queue:false, complete: next})\n    }\n                   \n    function revealDown(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        var height = element.height();\n        element.css({visibility:\"visible\",left: pos.left, top: pos.top, height:1})\n        .animate({height: height}, {duration:1000, queue:false, complete: next})\n    }\n                   \n    function revealUp(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        var height = element.height() - 10;\n        element.css({visibility:\"visible\",left: pos.left, top: pos.top + (height-1), height:1})\n            .animate({height: height, top: pos.top}, {duration:1000, queue:false, complete: next})\n    }\n            \n    function revealUpHalf(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        var height = element.height() - 10;\n        var halfHeight = height / 2;\n        element.css({visibility:\"visible\",left: pos.left, top: pos.top + (height-1), height:1})\n            .animate({height: halfHeight, top: (pos.top+halfHeight)}, {duration:1000, queue:false, complete: next})\n    }\n    \n    function flyOutUp(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        element.animate({top: element.height() * 2 * -1}, {duration:1000, queue:false, complete: next});\n    }\n    \n    function flyOutDown(animation, next) {    \n        var pos = animation.pos;\n        var element = animation.element;\n        element.animate({top: winHeight}, {duration:1000, queue:false, complete: next });\n    }\n    \n    function flyOutLeft(animation, next) {    \n        var pos = animation.pos;\n        var element = animation.element;\n        element.animate({left: element.width() * 2 * -1}, {duration:1000, queue:false, complete: next });\n    }\n    \n    function flyOutRight(animation, next) {    \n        var pos = animation.pos;\n        var element = animation.element;\n        element.animate({left: winWidth}, {duration:1000, queue:false, complete: next });\n    }\n        \n    function fadeOut(animation, next) {\n        var pos = animation.pos;\n        var element = animation.element;\n        element.fadeOut(1000, next);\n    }\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":9430}]],"length":9430}
